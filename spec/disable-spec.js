// Generated by CoffeeScript 1.12.7
(function() {
  var CSON, apm, fs, path, temp, wrench;

  fs = require('fs-plus');

  wrench = require('wrench');

  path = require('path');

  temp = require('temp');

  CSON = require('season');

  apm = require('../lib/apm-cli');

  describe('apm disable', function() {
    beforeEach(function() {
      silenceOutput();
      return spyOnToken();
    });
    it('disables an enabled package', function() {
      var atomHome, callback, configFilePath, packageSrcPath, packagesPath;
      atomHome = temp.mkdirSync('apm-home-dir-');
      process.env.ATOM_HOME = atomHome;
      callback = jasmine.createSpy('callback');
      configFilePath = path.join(atomHome, 'config.cson');
      CSON.writeFileSync(configFilePath, {
        '*': {
          core: {
            disabledPackages: ["test-module"]
          }
        }
      });
      packagesPath = path.join(atomHome, 'packages');
      packageSrcPath = path.join(__dirname, 'fixtures');
      fs.makeTreeSync(packagesPath);
      wrench.copyDirSyncRecursive(path.join(packageSrcPath, 'test-module'), path.join(packagesPath, 'test-module'));
      wrench.copyDirSyncRecursive(path.join(packageSrcPath, 'test-module-two'), path.join(packagesPath, 'test-module-two'));
      wrench.copyDirSyncRecursive(path.join(packageSrcPath, 'test-module-three'), path.join(packagesPath, 'test-module-three'));
      runs(function() {
        return apm.run(['disable', 'test-module-two', 'not-installed', 'test-module-three'], callback);
      });
      waitsFor('waiting for disable to complete', function() {
        return callback.callCount > 0;
      });
      return runs(function() {
        var config;
        expect(console.log).toHaveBeenCalled();
        expect(console.log.argsForCall[0][0]).toMatch(/Not Installed:\s*not-installed/);
        expect(console.log.argsForCall[1][0]).toMatch(/Disabled:\s*test-module-two/);
        config = CSON.readFileSync(configFilePath);
        return expect(config).toEqual({
          '*': {
            core: {
              disabledPackages: ["test-module", "test-module-two", "test-module-three"]
            }
          }
        });
      });
    });
    it('does nothing if a package is already disabled', function() {
      var atomHome, callback, configFilePath;
      atomHome = temp.mkdirSync('apm-home-dir-');
      process.env.ATOM_HOME = atomHome;
      callback = jasmine.createSpy('callback');
      configFilePath = path.join(atomHome, 'config.cson');
      CSON.writeFileSync(configFilePath, {
        '*': {
          core: {
            disabledPackages: ["vim-mode", "file-icons", "metrics", "exception-reporting"]
          }
        }
      });
      runs(function() {
        return apm.run(['disable', 'vim-mode', 'metrics'], callback);
      });
      waitsFor('waiting for disable to complete', function() {
        return callback.callCount > 0;
      });
      return runs(function() {
        var config;
        config = CSON.readFileSync(configFilePath);
        return expect(config).toEqual({
          '*': {
            core: {
              disabledPackages: ["vim-mode", "file-icons", "metrics", "exception-reporting"]
            }
          }
        });
      });
    });
    it('produces an error if config.cson doesn\'t exist', function() {
      var atomHome, callback;
      atomHome = temp.mkdirSync('apm-home-dir-');
      process.env.ATOM_HOME = atomHome;
      callback = jasmine.createSpy('callback');
      runs(function() {
        return apm.run(['disable', 'vim-mode'], callback);
      });
      waitsFor('waiting for disable to complete', function() {
        return callback.callCount > 0;
      });
      return runs(function() {
        expect(console.error).toHaveBeenCalled();
        return expect(console.error.argsForCall[0][0].length).toBeGreaterThan(0);
      });
    });
    return it('complains if user supplies no packages', function() {
      var atomHome, callback;
      atomHome = temp.mkdirSync('apm-home-dir-');
      process.env.ATOM_HOME = atomHome;
      callback = jasmine.createSpy('callback');
      runs(function() {
        return apm.run(['disable'], callback);
      });
      waitsFor('waiting for disable to complete', function() {
        return callback.callCount > 0;
      });
      return runs(function() {
        expect(console.error).toHaveBeenCalled();
        return expect(console.error.argsForCall[0][0].length).toBeGreaterThan(0);
      });
    });
  });

}).call(this);
