// Generated by CoffeeScript 1.12.7
(function() {
  var CSON, Install, apm, express, fs, http, path, temp, wrench,
    slice = [].slice;

  path = require('path');

  CSON = require('season');

  fs = require('../lib/fs');

  temp = require('temp');

  express = require('express');

  http = require('http');

  wrench = require('wrench');

  apm = require('../lib/apm-cli');

  Install = require('../lib/install');

  describe('apm install', function() {
    var atomHome, ref, resourcePath;
    ref = [], atomHome = ref[0], resourcePath = ref[1];
    beforeEach(function() {
      spyOnToken();
      silenceOutput();
      atomHome = temp.mkdirSync('apm-home-dir-');
      process.env.ATOM_HOME = atomHome;
      delete process.env.npm_config_cache;
      resourcePath = temp.mkdirSync('atom-resource-path-');
      return process.env.ATOM_RESOURCE_PATH = resourcePath;
    });
    return describe("when installing an atom package", function() {
      var server;
      server = null;
      beforeEach(function() {
        var app, live;
        app = express();
        app.get('/node/v10.20.1/node-v10.20.1.tar.gz', function(request, response) {
          return response.sendFile(path.join(__dirname, 'fixtures', 'node-v10.20.1.tar.gz'));
        });
        app.get('/node/v10.20.1/node-v10.20.1-headers.tar.gz', function(request, response) {
          return response.sendFile(path.join(__dirname, 'fixtures', 'node-v10.20.1-headers.tar.gz'));
        });
        app.get('/node/v10.20.1/node.lib', function(request, response) {
          return response.sendFile(path.join(__dirname, 'fixtures', 'node.lib'));
        });
        app.get('/node/v10.20.1/x64/node.lib', function(request, response) {
          return response.sendFile(path.join(__dirname, 'fixtures', 'node_x64.lib'));
        });
        app.get('/node/v10.20.1/SHASUMS256.txt', function(request, response) {
          return response.sendFile(path.join(__dirname, 'fixtures', 'SHASUMS256.txt'));
        });
        app.get('/test-module', function(request, response) {
          return response.sendFile(path.join(__dirname, 'fixtures', 'install-test-module.json'));
        });
        app.get('/tarball/test-module-1.1.0.tgz', function(request, response) {
          return response.sendFile(path.join(__dirname, 'fixtures', 'test-module-1.1.0.tgz'));
        });
        app.get('/tarball/test-module-1.2.0.tgz', function(request, response) {
          return response.sendFile(path.join(__dirname, 'fixtures', 'test-module-1.2.0.tgz'));
        });
        app.get('/tarball/test-module2-2.0.0.tgz', function(request, response) {
          return response.sendFile(path.join(__dirname, 'fixtures', 'test-module2-2.0.0.tgz'));
        });
        app.get('/packages/test-module', function(request, response) {
          return response.sendFile(path.join(__dirname, 'fixtures', 'install-test-module.json'));
        });
        app.get('/packages/test-module2', function(request, response) {
          return response.sendFile(path.join(__dirname, 'fixtures', 'install-test-module2.json'));
        });
        app.get('/packages/test-rename', function(request, response) {
          return response.redirect(302, '/packages/test-module');
        });
        app.get('/packages/test-module-with-bin', function(request, response) {
          return response.sendFile(path.join(__dirname, 'fixtures', 'install-test-module-with-bin.json'));
        });
        app.get('/packages/test-module-with-symlink', function(request, response) {
          return response.sendFile(path.join(__dirname, 'fixtures', 'install-test-module-with-symlink.json'));
        });
        app.get('/tarball/test-module-with-symlink-5.0.0.tgz', function(request, response) {
          return response.sendFile(path.join(__dirname, 'fixtures', 'test-module-with-symlink-5.0.0.tgz'));
        });
        app.get('/tarball/test-module-with-bin-2.0.0.tgz', function(request, response) {
          return response.sendFile(path.join(__dirname, 'fixtures', 'test-module-with-bin-2.0.0.tgz'));
        });
        app.get('/packages/multi-module', function(request, response) {
          return response.sendFile(path.join(__dirname, 'fixtures', 'install-multi-version.json'));
        });
        app.get('/packages/atom-2048', function(request, response) {
          return response.sendFile(path.join(__dirname, 'fixtures', 'atom-2048.json'));
        });
        app.get('/packages/native-package', function(request, response) {
          return response.sendFile(path.join(__dirname, 'fixtures', 'native-package.json'));
        });
        app.get('/tarball/native-package-1.0.0.tgz', function(request, response) {
          return response.sendFile(path.join(__dirname, 'fixtures', 'native-package-1.0.0.tar.gz'));
        });
        server = http.createServer(app);
        live = false;
        server.listen(3000, '127.0.0.1', function() {
          atomHome = temp.mkdirSync('apm-home-dir-');
          process.env.ATOM_HOME = atomHome;
          process.env.ATOM_ELECTRON_URL = "http://localhost:3000/node";
          process.env.ATOM_PACKAGES_URL = "http://localhost:3000/packages";
          process.env.ATOM_ELECTRON_VERSION = 'v10.20.1';
          process.env.npm_config_registry = 'http://localhost:3000/';
          return live = true;
        });
        return waitsFor(function() {
          return live;
        });
      });
      afterEach(function() {
        var done;
        done = false;
        server.close(function() {
          return done = true;
        });
        return waitsFor(function() {
          return done;
        });
      });
      describe('when an invalid URL is specified', function() {
        return it('logs an error and exits', function() {
          var callback;
          callback = jasmine.createSpy('callback');
          apm.run(['install', "not-a-module"], callback);
          waitsFor('waiting for install to complete', 600000, function() {
            return callback.callCount === 1;
          });
          return runs(function() {
            expect(console.error.mostRecentCall.args[0].length).toBeGreaterThan(0);
            return expect(callback.mostRecentCall.args[0]).not.toBeUndefined();
          });
        });
      });
      describe('when a package name is specified', function() {
        it('installs the package', function() {
          var callback, existingTestModuleFile, testModuleDirectory;
          testModuleDirectory = path.join(atomHome, 'packages', 'test-module');
          fs.makeTreeSync(testModuleDirectory);
          existingTestModuleFile = path.join(testModuleDirectory, 'will-be-deleted.js');
          fs.writeFileSync(existingTestModuleFile, '');
          expect(fs.existsSync(existingTestModuleFile)).toBeTruthy();
          callback = jasmine.createSpy('callback');
          apm.run(['install', "test-module"], callback);
          waitsFor('waiting for install to complete', 600000, function() {
            return callback.callCount === 1;
          });
          return runs(function() {
            expect(fs.existsSync(existingTestModuleFile)).toBeFalsy();
            expect(fs.existsSync(path.join(testModuleDirectory, 'index.js'))).toBeTruthy();
            expect(fs.existsSync(path.join(testModuleDirectory, 'package.json'))).toBeTruthy();
            return expect(callback.mostRecentCall.args[0]).toBeNull();
          });
        });
        return describe('when multiple releases are available', function() {
          it('installs the latest compatible version', function() {
            var callback, packageDirectory;
            CSON.writeFileSync(path.join(resourcePath, 'package.json'), {
              version: '1.5.0'
            });
            packageDirectory = path.join(atomHome, 'packages', 'test-module');
            callback = jasmine.createSpy('callback');
            apm.run(['install', 'multi-module'], callback);
            waitsFor('waiting for install to complete', 600000, function() {
              return callback.callCount === 1;
            });
            return runs(function() {
              expect(JSON.parse(fs.readFileSync(path.join(packageDirectory, 'package.json'))).version).toBe("1.1.0");
              return expect(callback.mostRecentCall.args[0]).toBeNull();
            });
          });
          it("ignores the commit SHA suffix in the version", function() {
            var callback, packageDirectory;
            CSON.writeFileSync(path.join(resourcePath, 'package.json'), {
              version: '1.5.0-deadbeef'
            });
            packageDirectory = path.join(atomHome, 'packages', 'test-module');
            callback = jasmine.createSpy('callback');
            apm.run(['install', 'multi-module'], callback);
            waitsFor('waiting for install to complete', 600000, function() {
              return callback.callCount === 1;
            });
            return runs(function() {
              expect(JSON.parse(fs.readFileSync(path.join(packageDirectory, 'package.json'))).version).toBe("1.1.0");
              return expect(callback.mostRecentCall.args[0]).toBeNull();
            });
          });
          it('logs an error when no compatible versions are available', function() {
            var callback, packageDirectory;
            CSON.writeFileSync(path.join(resourcePath, 'package.json'), {
              version: '0.9.0'
            });
            packageDirectory = path.join(atomHome, 'packages', 'test-module');
            callback = jasmine.createSpy('callback');
            apm.run(['install', 'multi-module'], callback);
            waitsFor('waiting for install to complete', 600000, function() {
              return callback.callCount === 1;
            });
            return runs(function() {
              expect(fs.existsSync(packageDirectory)).toBeFalsy();
              return expect(callback.mostRecentCall.args[0]).not.toBeNull();
            });
          });
          return describe("when the package has been renamed", function() {
            return it('installs the package with the new name and removes the old package', function() {
              var callback, testModuleDirectory, testRenameDirectory;
              testRenameDirectory = path.join(atomHome, 'packages', 'test-rename');
              testModuleDirectory = path.join(atomHome, 'packages', 'test-module');
              fs.makeTreeSync(testRenameDirectory);
              expect(fs.existsSync(testRenameDirectory)).toBeTruthy();
              expect(fs.existsSync(testModuleDirectory)).toBeFalsy();
              callback = jasmine.createSpy('callback');
              apm.run(['install', "test-rename"], callback);
              waitsFor('waiting for install to complete', 600000, function() {
                return callback.callCount === 1;
              });
              return runs(function() {
                expect(fs.existsSync(testRenameDirectory)).toBeFalsy();
                expect(fs.existsSync(testModuleDirectory)).toBeTruthy();
                expect(fs.existsSync(path.join(testModuleDirectory, 'index.js'))).toBeTruthy();
                expect(fs.existsSync(path.join(testModuleDirectory, 'package.json'))).toBeTruthy();
                return expect(callback.mostRecentCall.args[0]).toBeNull();
              });
            });
          });
        });
      });
      describe('when multiple package names are specified', function() {
        it('installs all packages', function() {
          var callback, testModule2Directory, testModuleDirectory;
          testModuleDirectory = path.join(atomHome, 'packages', 'test-module');
          testModule2Directory = path.join(atomHome, 'packages', 'test-module2');
          callback = jasmine.createSpy('callback');
          apm.run(['install', "test-module", "test-module2", "test-module"], callback);
          waitsFor('waiting for install to complete', 600000, function() {
            return callback.callCount === 1;
          });
          return runs(function() {
            expect(fs.existsSync(path.join(testModuleDirectory, 'index.js'))).toBeTruthy();
            expect(fs.existsSync(path.join(testModuleDirectory, 'package.json'))).toBeTruthy();
            expect(fs.existsSync(path.join(testModule2Directory, 'index2.js'))).toBeTruthy();
            expect(fs.existsSync(path.join(testModule2Directory, 'package.json'))).toBeTruthy();
            return expect(callback.mostRecentCall.args[0]).toBeNull();
          });
        });
        return it("installs them in order and stops on the first failure", function() {
          var callback, testModule2Directory, testModuleDirectory;
          testModuleDirectory = path.join(atomHome, 'packages', 'test-module');
          testModule2Directory = path.join(atomHome, 'packages', 'test-module2');
          callback = jasmine.createSpy('callback');
          apm.run(['install', "test-module", "test-module-bad", "test-module2"], callback);
          waitsFor('waiting for install to complete', 600000, function() {
            return callback.callCount === 1;
          });
          return runs(function() {
            expect(fs.existsSync(path.join(testModuleDirectory, 'index.js'))).toBeTruthy();
            expect(fs.existsSync(path.join(testModuleDirectory, 'package.json'))).toBeTruthy();
            expect(fs.existsSync(path.join(testModule2Directory, 'index2.js'))).toBeFalsy();
            expect(fs.existsSync(path.join(testModule2Directory, 'package.json'))).toBeFalsy();
            return expect(callback.mostRecentCall.args[0]).not.toBeUndefined();
          });
        });
      });
      describe('when no path is specified', function() {
        return it('installs all dependent modules', function() {
          var callback, moduleDirectory;
          moduleDirectory = path.join(temp.mkdirSync('apm-test-module-'), 'test-module-with-dependencies');
          wrench.copyDirSyncRecursive(path.join(__dirname, 'fixtures', 'test-module-with-dependencies'), moduleDirectory);
          process.chdir(moduleDirectory);
          callback = jasmine.createSpy('callback');
          apm.run(['install'], callback);
          waitsFor('waiting for install to complete', 600000, function() {
            return callback.callCount > 0;
          });
          return runs(function() {
            expect(fs.existsSync(path.join(moduleDirectory, 'node_modules', 'test-module', 'index.js'))).toBeTruthy();
            expect(fs.existsSync(path.join(moduleDirectory, 'node_modules', 'test-module', 'package.json'))).toBeTruthy();
            return expect(callback.mostRecentCall.args[0]).toEqual(null);
          });
        });
      });
      describe("when the packages directory does not exist", function() {
        return it("creates the packages directory and any intermediate directories that do not exist", function() {
          var callback;
          atomHome = temp.path('apm-home-dir-');
          process.env.ATOM_HOME = atomHome;
          expect(fs.existsSync(atomHome)).toBe(false);
          callback = jasmine.createSpy('callback');
          apm.run(['install', 'test-module'], callback);
          waitsFor('waiting for install to complete', 600000, function() {
            return callback.callCount === 1;
          });
          return runs(function() {
            return expect(fs.existsSync(atomHome)).toBe(true);
          });
        });
      });
      describe("when the package contains symlinks", function() {
        return it("copies them correctly from the temp directory", function() {
          var callback, testModuleDirectory;
          testModuleDirectory = path.join(atomHome, 'packages', 'test-module-with-symlink');
          callback = jasmine.createSpy('callback');
          apm.run(['install', "test-module-with-symlink"], callback);
          waitsFor('waiting for install to complete', 600000, function() {
            return callback.callCount === 1;
          });
          return runs(function() {
            expect(fs.isFileSync(path.join(testModuleDirectory, 'index.js'))).toBeTruthy();
            if (process.platform === 'win32') {
              return expect(fs.isFileSync(path.join(testModuleDirectory, 'node_modules', '.bin', 'abin'))).toBeTruthy();
            } else {
              return expect(fs.realpathSync(path.join(testModuleDirectory, 'node_modules', '.bin', 'abin'))).toBe(fs.realpathSync(path.join(testModuleDirectory, 'node_modules', 'test-module-with-bin', 'bin', 'abin.js')));
            }
          });
        });
      });
      describe("when the package installs binaries", function() {
        return it("correctly installs the package ignoring any binaries", function() {
          var callback, testModuleDirectory;
          testModuleDirectory = path.join(atomHome, 'packages', 'test-module-with-bin');
          callback = jasmine.createSpy('callback');
          apm.run(['install', "test-module-with-bin"], callback);
          waitsFor('waiting for install to complete', 60000, function() {
            return callback.callCount === 1;
          });
          return runs(function() {
            expect(callback.argsForCall[0][0]).toBeFalsy();
            return expect(fs.isFileSync(path.join(testModuleDirectory, 'package.json'))).toBeTruthy();
          });
        });
      });
      describe('when a packages file is specified', function() {
        it('installs all the packages listed in the file', function() {
          var callback, packagesFilePath, testModule2Directory, testModuleDirectory;
          testModuleDirectory = path.join(atomHome, 'packages', 'test-module');
          testModule2Directory = path.join(atomHome, 'packages', 'test-module2');
          packagesFilePath = path.join(__dirname, 'fixtures', 'packages.txt');
          callback = jasmine.createSpy('callback');
          apm.run(['install', '--packages-file', packagesFilePath], callback);
          waitsFor('waiting for install to complete', 600000, function() {
            return callback.callCount === 1;
          });
          return runs(function() {
            expect(fs.existsSync(path.join(testModuleDirectory, 'index.js'))).toBeTruthy();
            expect(fs.existsSync(path.join(testModuleDirectory, 'package.json'))).toBeTruthy();
            expect(fs.existsSync(path.join(testModule2Directory, 'index2.js'))).toBeTruthy();
            expect(fs.existsSync(path.join(testModule2Directory, 'package.json'))).toBeTruthy();
            return expect(callback.mostRecentCall.args[0]).toBeNull();
          });
        });
        return it('calls back with an error when the file does not exist', function() {
          var badFilePath, callback;
          badFilePath = path.join(__dirname, 'fixtures', 'not-packages.txt');
          callback = jasmine.createSpy('callback');
          apm.run(['install', '--packages-file', badFilePath], callback);
          waitsFor('waiting for install to complete', 600000, function() {
            return callback.callCount === 1;
          });
          return runs(function() {
            return expect(callback.mostRecentCall.args[0]).not.toBeNull();
          });
        });
      });
      describe('when the package is bundled with Atom', function() {
        it('installs from a repo-local package path', function() {
          var atomRepoPath, callback, originalPath, packageDirectory;
          atomRepoPath = temp.mkdirSync('apm-repo-dir-');
          CSON.writeFileSync(path.join(atomRepoPath, 'package.json'), {
            packageDependencies: {
              'test-module-with-dependencies': 'file:./packages/test-module-with-dependencies'
            }
          });
          packageDirectory = path.join(atomRepoPath, 'packages', 'test-module-with-dependencies');
          fs.makeTreeSync(path.join(atomRepoPath, 'packages'));
          wrench.copyDirSyncRecursive(path.join(__dirname, 'fixtures', 'test-module-with-dependencies'), packageDirectory);
          originalPath = process.cwd();
          process.chdir(atomRepoPath);
          callback = jasmine.createSpy('callback');
          apm.run(['install'], callback);
          waitsFor('waiting for install to complete', 600000, function() {
            return callback.callCount > 0;
          });
          return runs(function() {
            process.chdir(originalPath);
            expect(fs.existsSync(path.join(atomRepoPath, 'node_modules', 'test-module-with-dependencies', 'package.json'))).toBeTruthy();
            expect(fs.existsSync(path.join(atomRepoPath, 'node_modules', 'test-module', 'package.json'))).toBeTruthy();
            return expect(callback.mostRecentCall.args[0]).toEqual(null);
          });
        });
        return it('logs a message to standard error', function() {
          var callback;
          CSON.writeFileSync(path.join(resourcePath, 'package.json'), {
            packageDependencies: {
              'test-module': '1.0'
            }
          });
          callback = jasmine.createSpy('callback');
          apm.run(['install', 'test-module'], callback);
          waitsFor('waiting for install to complete', 600000, function() {
            return callback.callCount === 1;
          });
          return runs(function() {
            return expect(console.error.mostRecentCall.args[0].length).toBeGreaterThan(0);
          });
        });
      });
      describe('when --check is specified', function() {
        return it('compiles a sample native module', function() {
          var callback;
          callback = jasmine.createSpy('callback');
          apm.run(['install', '--check'], callback);
          waitsFor('waiting for install to complete', 600000, function() {
            return callback.callCount === 1;
          });
          return runs(function() {
            return expect(callback.mostRecentCall.args[0]).toBeUndefined();
          });
        });
      });
      describe('when a deprecated package name is specified', function() {
        return it('does not install the package', function() {
          var callback;
          callback = jasmine.createSpy('callback');
          apm.run(['install', "atom-2048"], callback);
          waitsFor('waiting for install to complete', 600000, function() {
            return callback.callCount === 1;
          });
          return runs(function() {
            return expect(callback.mostRecentCall.args[0]).toBeTruthy();
          });
        });
      });
      describe('::getNormalizedGitUrls', function() {
        it('normalizes https:// urls', function() {
          var url, urls;
          url = "https://github.com/user/repo.git";
          urls = new Install().getNormalizedGitUrls(url);
          return expect(urls).toEqual([url]);
        });
        it('normalizes git@ urls', function() {
          var url, urls;
          url = "git@github.com:user/repo.git";
          urls = new Install().getNormalizedGitUrls(url);
          return expect(urls).toEqual(["git+ssh://git@github.com/user/repo.git"]);
        });
        it('normalizes file:// urls', function() {
          var url, urls;
          url = "file:///path/to/folder";
          urls = new Install().getNormalizedGitUrls(url);
          return expect(urls).toEqual([url]);
        });
        return it('normalizes user/repo shortcuts into both HTTPS and SSH URLs', function() {
          var url, urls;
          url = "user/repo";
          urls = new Install().getNormalizedGitUrls(url);
          return expect(urls).toEqual(["https://github.com/user/repo.git", "git+ssh://git@github.com/user/repo.git"]);
        });
      });
      describe('::cloneFirstValidGitUrl', function() {
        return describe('when cloning a URL fails', function() {
          var install, urls;
          install = null;
          urls = ["url1", "url2", "url3", "url4"];
          beforeEach(function() {
            var fakeCloneRepository;
            install = new Install();
            fakeCloneRepository = function() {
              var args, callback, url;
              url = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
              callback = args[args.length - 1];
              if (url !== urls[2]) {
                return callback(new Error("Failed to clone"));
              }
            };
            return spyOn(install, "cloneNormalizedUrl").andCallFake(fakeCloneRepository);
          });
          return it('tries cloning the next URL until one works', function() {
            install.cloneFirstValidGitUrl(urls, {}, function() {});
            expect(install.cloneNormalizedUrl.calls.length).toBe(3);
            expect(install.cloneNormalizedUrl.argsForCall[0][0]).toBe(urls[0]);
            expect(install.cloneNormalizedUrl.argsForCall[1][0]).toBe(urls[1]);
            return expect(install.cloneNormalizedUrl.argsForCall[2][0]).toBe(urls[2]);
          });
        });
      });
      describe('::getPackageDependencies', function() {
        var originalPath, packageDependencies, packageJsonContents;
        originalPath = null;
        packageDependencies = null;
        packageJsonContents = {
          dependencies: {
            'duplicate-package': 'file:packages/duplicate-module',
            'different-package': 'file:packages/different-package',
            'versioned-package': 'https://url/to/versioned-package.tgz'
          },
          packageDependencies: {
            'duplicate-package': 'file:./packages/duplicate-module',
            'different-package': 'file:packages/im-batman',
            'missing-package': 'file:./packages/missing-package',
            'versioned-package': '1.2.3'
          }
        };
        beforeEach(function() {
          var atomRepoPath, install;
          atomRepoPath = temp.mkdirSync('apm-repo-dir-');
          CSON.writeFileSync(path.join(atomRepoPath, 'package.json'), packageJsonContents);
          originalPath = process.cwd();
          process.chdir(atomRepoPath);
          install = new Install();
          return packageDependencies = install.getPackageDependencies();
        });
        it('excludes repo-local packages in \'packageDependencies\' which have an equivalent normalized path to that in \'dependencies\'', function() {
          return expect(packageDependencies['duplicate-package']).toBe(void 0);
        });
        it('includes repo-local packages in \'packageDependencies\' which have different normalized path to that in \'dependencies\'', function() {
          return expect(packageDependencies['different-package']).toBe('file:packages/im-batman');
        });
        it('includes repo-local packages in \'packageDependencies\' that aren\'t in \'dependencies\'', function() {
          return expect(packageDependencies['missing-package']).toBe('file:./packages/missing-package');
        });
        it('includes versioned packages in \'packageDependencies\'', function() {
          return expect(packageDependencies['versioned-package']).toBe('1.2.3');
        });
        return afterEach(function() {
          return process.chdir(originalPath);
        });
      });
      describe('when installing a package from a git repository', function() {
        var cloneUrl, pkgJsonPath, ref1;
        ref1 = [], cloneUrl = ref1[0], pkgJsonPath = ref1[1];
        beforeEach(function() {
          var count, gitRepo;
          count = 0;
          gitRepo = path.join(__dirname, "fixtures", "test-git-repo.git");
          cloneUrl = "file://" + gitRepo;
          apm.run(["install", cloneUrl], function() {
            return count++;
          });
          waitsFor(10000, function() {
            return count === 1;
          });
          return runs(function() {
            return pkgJsonPath = path.join(process.env.ATOM_HOME, 'packages', 'test-git-repo', 'package.json');
          });
        });
        it('installs the repository with a working dir to $ATOM_HOME/packages', function() {
          return expect(fs.existsSync(pkgJsonPath)).toBeTruthy();
        });
        it('adds apmInstallSource to the package.json with the source and sha', function() {
          var json, sha;
          sha = '8ae432341ac6708aff9bb619eb015da14e9d0c0f';
          json = require(pkgJsonPath);
          return expect(json.apmInstallSource).toEqual({
            type: 'git',
            source: cloneUrl,
            sha: sha
          });
        });
        return it('installs dependencies and devDependencies', function() {
          var allDeps, deps, devDeps, json;
          json = require(pkgJsonPath);
          deps = Object.keys(json.dependencies);
          devDeps = Object.keys(json.devDependencies);
          allDeps = deps.concat(devDeps);
          expect(allDeps).toEqual(["tiny-node-module-one", "tiny-node-module-two"]);
          return allDeps.forEach(function(dep) {
            var modPath;
            modPath = path.join(process.env.ATOM_HOME, 'packages', 'test-git-repo', 'node_modules', dep);
            return expect(fs.existsSync(modPath)).toBeTruthy();
          });
        });
      });
      describe('when installing a Git URL and --json is specified', function() {
        var cloneUrl, pkgJsonPath, ref1;
        ref1 = [], cloneUrl = ref1[0], pkgJsonPath = ref1[1];
        beforeEach(function() {
          var callback, gitRepo;
          callback = jasmine.createSpy('callback');
          gitRepo = path.join(__dirname, "fixtures", "test-git-repo.git");
          cloneUrl = "file://" + gitRepo;
          apm.run(["install", cloneUrl, '--json'], callback);
          waitsFor(10000, function() {
            return callback.callCount === 1;
          });
          return runs(function() {
            return pkgJsonPath = path.join(process.env.ATOM_HOME, 'packages', 'test-git-repo', 'package.json');
          });
        });
        return it('logs the installation path and the package metadata for a package installed via git url', function() {
          var json, sha;
          sha = '8ae432341ac6708aff9bb619eb015da14e9d0c0f';
          expect(process.stdout.write.calls.length).toBe(0);
          json = JSON.parse(console.log.argsForCall[0][0]);
          expect(json.length).toBe(1);
          expect(json[0].installPath).toBe(path.join(process.env.ATOM_HOME, 'packages', 'test-git-repo'));
          expect(json[0].metadata.name).toBe('test-git-repo');
          return expect(json[0].metadata.apmInstallSource).toEqual({
            type: 'git',
            source: cloneUrl,
            sha: sha
          });
        });
      });
      describe('when installing a registred package and --json is specified', function() {
        beforeEach(function() {
          var callback;
          callback = jasmine.createSpy('callback');
          apm.run(['install', "test-module", "test-module2", "--json"], callback);
          return waitsFor('waiting for install to complete', 600000, function() {
            return callback.callCount === 1;
          });
        });
        return it('logs the installation path and the package metadata for a registered package', function() {
          var json;
          expect(process.stdout.write.calls.length).toBe(0);
          json = JSON.parse(console.log.argsForCall[0][0]);
          expect(json.length).toBe(2);
          expect(json[0].installPath).toBe(path.join(process.env.ATOM_HOME, 'packages', 'test-module'));
          expect(json[0].metadata.name).toBe('test-module');
          expect(json[1].installPath).toBe(path.join(process.env.ATOM_HOME, 'packages', 'test-module2'));
          return expect(json[1].metadata.name).toBe('test-module2');
        });
      });
      return describe("with a space in node-gyp's path", function() {
        var nodeModules;
        nodeModules = fs.realpathSync(path.join(__dirname, '..', 'node_modules'));
        beforeEach(function() {
          var nodeGypPath;
          nodeGypPath = path.dirname(path.dirname(require.resolve('node-gyp')));
          fs.copySync(nodeGypPath, path.join(nodeModules, 'with a space'));
          process.env.npm_config_node_gyp = path.join(nodeModules, 'with a space', 'bin', 'node-gyp.js');
          return fs.chmodSync(process.env.npm_config_node_gyp, fs.constants.S_IRUSR | fs.constants.S_IXUSR);
        });
        afterEach(function() {
          delete process.env.npm_config_node_gyp;
          return fs.removeSync(path.join(nodeModules, 'with a space'));
        });
        return it('builds native code successfully', function() {
          var callback;
          callback = jasmine.createSpy('callback');
          apm.run(['install', 'native-package'], callback);
          waitsFor('waiting for install to complete', 600000, function() {
            return callback.callCount === 1;
          });
          return runs(function() {
            var makefileContent, testModuleDirectory;
            expect(callback.mostRecentCall.args[0]).toBeNull();
            testModuleDirectory = path.join(atomHome, 'packages', 'native-package');
            expect(fs.existsSync(path.join(testModuleDirectory, 'index.js'))).toBeTruthy();
            expect(fs.existsSync(path.join(testModuleDirectory, 'package.json'))).toBeTruthy();
            expect(fs.existsSync(path.join(testModuleDirectory, 'build', 'Release', 'native.node'))).toBeTruthy();
            if (process.platform !== 'win32') {
              makefileContent = fs.readFileSync(path.join(testModuleDirectory, 'build', 'Makefile'), {
                encoding: 'utf-8'
              });
              return expect(makefileContent).toMatch('node_modules/with\\ a\\ space/addon.gypi');
            }
          });
        });
      });
    });
  });

}).call(this);
