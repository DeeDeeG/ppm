// Generated by CoffeeScript 1.12.7
(function() {
  var apm, fs, path, temp;

  path = require('path');

  fs = require('fs-plus');

  temp = require('temp');

  apm = require('../lib/apm-cli');

  describe("apm config", function() {
    var atomHome, ref, userConfigPath;
    ref = [], atomHome = ref[0], userConfigPath = ref[1];
    beforeEach(function() {
      spyOnToken();
      silenceOutput();
      atomHome = temp.mkdirSync('apm-home-dir-');
      process.env.ATOM_HOME = atomHome;
      userConfigPath = path.join(atomHome, '.apmrc');
      return delete process.env.npm_config_cache;
    });
    describe("apm config get", function() {
      return it("reads the value from the global config when there is no user config", function() {
        var callback;
        callback = jasmine.createSpy('callback');
        apm.run(['config', 'get', 'cache'], callback);
        waitsFor('waiting for config get to complete', 600000, function() {
          return callback.callCount === 1;
        });
        return runs(function() {
          return expect(process.stdout.write.argsForCall[0][0].trim()).toBe(path.join(process.env.ATOM_HOME, '.apm'));
        });
      });
    });
    return describe("apm config set", function() {
      return it("sets the value in the user config", function() {
        var callback;
        expect(fs.isFileSync(userConfigPath)).toBe(false);
        callback = jasmine.createSpy('callback');
        apm.run(['config', 'set', 'foo', 'bar'], callback);
        waitsFor('waiting for config set to complete', 600000, function() {
          return callback.callCount === 1;
        });
        runs(function() {
          expect(fs.isFileSync(userConfigPath)).toBe(true);
          callback.reset();
          return apm.run(['config', 'get', 'foo'], callback);
        });
        waitsFor('waiting for config get to complete', 600000, function() {
          return callback.callCount === 1;
        });
        return runs(function() {
          return expect(process.stdout.write.argsForCall[0][0].trim()).toBe('bar');
        });
      });
    });
  });

}).call(this);
