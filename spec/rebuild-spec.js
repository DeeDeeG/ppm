// Generated by CoffeeScript 1.12.7
(function() {
  var CSON, apm, express, fs, http, path, temp, wrench;

  path = require('path');

  CSON = require('season');

  fs = require('fs-plus');

  temp = require('temp');

  express = require('express');

  http = require('http');

  wrench = require('wrench');

  apm = require('../lib/apm-cli');

  describe('apm rebuild', function() {
    var originalPathEnv, ref, server;
    ref = [], server = ref[0], originalPathEnv = ref[1];
    beforeEach(function() {
      var app, live;
      spyOnToken();
      silenceOutput();
      app = express();
      app.get('/node/v10.20.1/node-v10.20.1.tar.gz', function(request, response) {
        return response.sendFile(path.join(__dirname, 'fixtures', 'node-v10.20.1.tar.gz'));
      });
      app.get('/node/v10.20.1/node-v10.20.1-headers.tar.gz', function(request, response) {
        return response.sendFile(path.join(__dirname, 'fixtures', 'node-v10.20.1-headers.tar.gz'));
      });
      app.get('/node/v10.20.1/node.lib', function(request, response) {
        return response.sendFile(path.join(__dirname, 'fixtures', 'node.lib'));
      });
      app.get('/node/v10.20.1/x64/node.lib', function(request, response) {
        return response.sendFile(path.join(__dirname, 'fixtures', 'node_x64.lib'));
      });
      app.get('/node/v10.20.1/SHASUMS256.txt', function(request, response) {
        return response.sendFile(path.join(__dirname, 'fixtures', 'SHASUMS256.txt'));
      });
      server = http.createServer(app);
      live = false;
      server.listen(3000, '127.0.0.1', function() {
        var atomHome;
        atomHome = temp.mkdirSync('apm-home-dir-');
        process.env.ATOM_HOME = atomHome;
        process.env.ATOM_ELECTRON_URL = "http://localhost:3000/node";
        process.env.ATOM_PACKAGES_URL = "http://localhost:3000/packages";
        process.env.ATOM_ELECTRON_VERSION = 'v10.20.1';
        process.env.ATOM_RESOURCE_PATH = temp.mkdirSync('atom-resource-path-');
        originalPathEnv = process.env.PATH;
        process.env.PATH = "";
        return live = true;
      });
      return waitsFor(function() {
        return live;
      });
    });
    afterEach(function() {
      var done;
      process.env.PATH = originalPathEnv;
      done = false;
      server.close(function() {
        return done = true;
      });
      return waitsFor(function() {
        return done;
      });
    });
    it("rebuilds all modules when no module names are specified", function() {
      var callback, packageToRebuild;
      packageToRebuild = path.join(__dirname, 'fixtures/package-with-native-deps');
      process.chdir(packageToRebuild);
      callback = jasmine.createSpy('callback');
      apm.run(['rebuild'], callback);
      waitsFor('waiting for rebuild to complete', 600000, function() {
        return callback.callCount === 1;
      });
      return runs(function() {
        return expect(callback.mostRecentCall.args[0]).toBeUndefined();
      });
    });
    return it("rebuilds the specified modules", function() {
      var callback, packageToRebuild;
      packageToRebuild = path.join(__dirname, 'fixtures/package-with-native-deps');
      process.chdir(packageToRebuild);
      callback = jasmine.createSpy('callback');
      apm.run(['rebuild', 'native-dep'], callback);
      waitsFor('waiting for rebuild to complete', 600000, function() {
        return callback.callCount === 1;
      });
      return runs(function() {
        return expect(callback.mostRecentCall.args[0]).toBeUndefined();
      });
    });
  });

}).call(this);
