// Generated by CoffeeScript 1.12.7
const path = require("path");
const fs = require("fs");
const http = require("http");
const temp = require("temp");
const express = require("express");
const wrench = require("wrench");
const CSON = require("season");
const apm = require("../lib/apm-cli");

describe('apm ci', function() {
  let ref = [];
  let atomHome = ref[0];
  let resourcePath = ref[1];
  let server = ref[2];

  beforeAll(function() {
    let app, live;
    //spyOnToken();
    //silenceOutput();
    atomHome = temp.mkdirSync('apm-home-dir-');
    process.env.ATOM_HOME = atomHome;
    resourcePath = temp.mkdirSync('atom-resource-path-');
    process.env.ATOM_RESOURCE_PATH = resourcePath;
    delete process.env.npm_config_cache;

    app = express();

    app.get('/node/v10.20.1/node-v10.20.1.tar.gz', (req, res) => {
      res.sendFile(path.join(__dirname, 'fixtures', 'node-v10.20.1.tar.gz'));
    });
    app.get('/node/v10.20.1/node-v10.20.1-headers.tar.gz', (req, res) => {
      res.sendFile(path.join(__dirname, 'fixtures', 'node-v10.20.1-headers.tar.gz'));
    });
    app.get('/node/v10.20.1/node.lib', (req, res) => {
      res.sendFile(path.join(__dirname, 'fixtures', 'node.lib'));
    });
    app.get('/node/v10.20.1/x64/node.lib', (req, res) => {
      res.sendFile(path.join(__dirname, 'fixtures', 'node_x64.lib'));
    });;
    app.get('/node/v10.20.1/SHASUMS256.txt', (req, res) => {
      res.sendFile(path.join(__dirname, 'fixtures', 'SHASUMS256.txt'));
    });
    app.get('/test-module-with-dependencies', (req, res) => {
      res.sendFile(path.join(__dirname, 'fixtures', 'install-locked-version.json'));
    });
    app.get('/test-module', (req, res) => {
      res.sendFile(path.join(__dirname, 'fixtures', 'install-test-module.json'));
    });
    app.get('/native-module', (req, res) => {
      res.sendFile(path.join(__dirname, 'fixutres', 'native-module.json'));
    });
    app.get('/tarball/test-module-with-dependencies-1.1.0.tgz', (req, res) => {
      res.sendFile(path.join(__dirname, 'fixtures', 'test-module-width-dependencies-1.1.0.tgz'));
    });
    app.get('/tarball/test-module-1.1.0.tgz', (req, res) => {
      res.sendFile(path.join(__dirname, 'fixtures', 'test-module-1.1.0.tgz'));
    });
    app.get('/tarball/native-module-1.0.0.tgz', (req, res) => {
      res.sendFile(path.join(__dirname, 'fixtures', 'native-module-1.0.0.tgz'));
    });

    app.listen(3300, () => {
      process.env.ATOM_ELECTRON_URL = "http://localhost:3300/node";
      process.env.ATOM_PACKAGES_URL = "http://localhost:3300/packages";
      process.env.ATOM_ELECTRON_VERSION = 'v10.20.1';
      process.env.npm_config_registry = 'http://localhost:3300/';
    });
  });
  afterAll(function() {
    let done = false;
    server.close(function() {
      return done = true;
    });
    return waitsFor(function() {
      return done;
    });
  });
    it('installs dependency versions as specified by the lockfile', function() {
      var callback, moduleDirectory;
      moduleDirectory = path.join(temp.mkdirSync('apm-test-'), 'test-module-with-lockfile');
      wrench.copyDirSyncRecursive(path.join(__dirname, 'fixtures', 'test-module-with-lockfile'), moduleDirectory);
      process.chdir(moduleDirectory);
      callback = jasmine.createSpy('callback');
      apm.run(['ci'], callback);
      waitsFor('waiting for install to complete', 600000, function() {
        return callback.callCount > 0;
      });
      return runs(function() {
        var pjson0, pjson1;
        expect(callback.mostRecentCall.args[0]).toBeNull();
        pjson0 = CSON.readFileSync(path.join('node_modules', 'test-module-with-dependencies', 'package.json'));
        expect(pjson0.version).toBe('1.1.0');
        pjson1 = CSON.readFileSync(path.join('node_modules', 'test-module', 'package.json'));
        return expect(pjson1.version).toBe('1.1.0');
      });
    });
    it('builds a native dependency correctly', function() {
      var callback0, callback1, moduleDirectory, pjson, pjsonPath;
      moduleDirectory = path.join(temp.mkdirSync('apm-test-'), 'test-module-with-native');
      wrench.copyDirSyncRecursive(path.join(__dirname, 'fixtures', 'test-module-with-lockfile'), moduleDirectory);
      process.chdir(moduleDirectory);
      pjsonPath = path.join(moduleDirectory, 'package.json');
      pjson = CSON.readFileSync(pjsonPath);
      pjson.dependencies['native-module'] = '^1.0.0';
      CSON.writeFileSync(pjsonPath, pjson);
      callback0 = jasmine.createSpy('callback');
      callback1 = jasmine.createSpy('callback');
      apm.run(['install'], callback0);
      waitsFor('waiting for install to complete', 600000, function() {
        return callback0.callCount > 0;
      });
      runs(function() {
        expect(callback0.mostRecentCall.args[0]).toBeNull();
        return apm.run(['ci'], callback1);
      });
      waitsFor('waiting for ci to complete', 600000, function() {
        return callback1.callCount > 0;
      });
      return runs(function() {
        expect(callback1.mostRecentCall.args[0]).toBeNull();
        return expect(fs.existsSync(path.join(moduleDirectory, 'node_modules', 'native-module', 'build', 'Release', 'native.node'))).toBeTruthy();
      });
    });
    it('fails if the lockfile is not present', function() {
      var callback, moduleDirectory;
      moduleDirectory = path.join(temp.mkdirSync('apm-test-'), 'test-module');
      wrench.copyDirSyncRecursive(path.join(__dirname, 'fixtures', 'test-module'), moduleDirectory);
      process.chdir(moduleDirectory);
      callback = jasmine.createSpy('callback');
      apm.run(['ci'], callback);
      waitsFor('waiting for install to complete', 600000, function() {
        return callback.callCount > 0;
      });
      return runs(function() {
        return expect(callback.mostRecentCall.args[0]).not.toBeNull();
      });
    });
    return it('fails if the lockfile is out of date', function() {
      var callback, moduleDirectory, pjson, pjsonPath;
      moduleDirectory = path.join(temp.mkdirSync('apm-test-'), 'test-module-with-lockfile');
      wrench.copyDirSyncRecursive(path.join(__dirname, 'fixtures', 'test-module-with-lockfile'), moduleDirectory);
      process.chdir(moduleDirectory);
      pjsonPath = path.join(moduleDirectory, 'package.json');
      pjson = CSON.readFileSync(pjsonPath);
      pjson.dependencies['test-module'] = '^1.2.0';
      CSON.writeFileSync(pjsonPath, pjson);
      callback = jasmine.createSpy('callback');
      apm.run(['ci'], callback);
      waitsFor('waiting for install to complete', 600000, function() {
        return callback.callCount > 0;
      });
      return runs(function() {
        return expect(callback.mostRecentCall.args[0]).not.toBeNull();
      });
    });
  });
