// Generated by CoffeeScript 1.12.7
(function() {
  var apm, child_process, fs, path, temp;

  child_process = require('child_process');

  fs = require('fs');

  path = require('path');

  temp = require('temp');

  apm = require('../lib/apm-cli');

  describe("apm test", function() {
    var specPath;
    specPath = [][0];
    beforeEach(function() {
      var currentDir;
      silenceOutput();
      spyOnToken();
      currentDir = temp.mkdirSync('apm-init-');
      spyOn(process, 'cwd').andReturn(currentDir);
      return specPath = path.join(currentDir, 'spec');
    });
    it("calls atom to test", function() {
      var atomSpawn;
      atomSpawn = spyOn(child_process, 'spawn').andReturn({
        stdout: {
          on: function() {}
        },
        stderr: {
          on: function() {}
        },
        on: function() {}
      });
      apm.run(['test']);
      waitsFor('waiting for test to complete', function() {
        return atomSpawn.callCount === 1;
      });
      return runs(function() {
        expect(atomSpawn.mostRecentCall.args[0].indexOf('atom')).not.toBe(-1);
        expect(atomSpawn.mostRecentCall.args[1][0]).toEqual('--dev');
        expect(atomSpawn.mostRecentCall.args[1][1]).toEqual('--test');
        expect(atomSpawn.mostRecentCall.args[1][2]).toEqual(specPath);
        if (process.platform !== 'win32') {
          return expect(atomSpawn.mostRecentCall.args[2].streaming).toBeTruthy();
        }
      });
    });
    return describe('returning', function() {
      var callback, returnWithCode;
      callback = [][0];
      returnWithCode = function(type, code) {
        var atomReturnFn;
        callback = jasmine.createSpy('callback');
        atomReturnFn = function(e, fn) {
          if (e === type) {
            return fn(code);
          }
        };
        spyOn(child_process, 'spawn').andReturn({
          stdout: {
            on: function() {}
          },
          stderr: {
            on: function() {}
          },
          on: atomReturnFn,
          removeListener: function() {}
        });
        return apm.run(['test'], callback);
      };
      describe('successfully', function() {
        beforeEach(function() {
          return returnWithCode('close', 0);
        });
        return it("prints success", function() {
          expect(callback).toHaveBeenCalled();
          expect(callback.mostRecentCall.args[0]).toBeUndefined();
          return expect(process.stdout.write.mostRecentCall.args[0]).toEqual('Tests passed\n'.green);
        });
      });
      describe('with a failure', function() {
        beforeEach(function() {
          return returnWithCode('close', 1);
        });
        return it("prints failure", function() {
          expect(callback).toHaveBeenCalled();
          return expect(callback.mostRecentCall.args[0]).toEqual('Tests failed');
        });
      });
      return describe('with an error', function() {
        beforeEach(function() {
          return returnWithCode('error');
        });
        return it("prints failure", function() {
          expect(callback).toHaveBeenCalled();
          return expect(callback.mostRecentCall.args[0]).toEqual('Tests failed');
        });
      });
    });
  });

}).call(this);
