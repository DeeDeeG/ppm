// Generated by CoffeeScript 1.12.7
(function() {
  var CSON, apm, fs, path, temp;

  fs = require('fs');

  path = require('path');

  temp = require('temp');

  CSON = require('season');

  apm = require('../lib/apm-cli');

  describe('apm enable', function() {
    beforeEach(function() {
      silenceOutput();
      return spyOnToken();
    });
    it('enables a disabled package', function() {
      var atomHome, callback, configFilePath;
      atomHome = temp.mkdirSync('apm-home-dir-');
      process.env.ATOM_HOME = atomHome;
      callback = jasmine.createSpy('callback');
      configFilePath = path.join(atomHome, 'config.cson');
      CSON.writeFileSync(configFilePath, {
        '*': {
          core: {
            disabledPackages: ["metrics", "vim-mode", "exception-reporting", "file-icons"]
          }
        }
      });
      runs(function() {
        return apm.run(['enable', 'vim-mode', 'not-installed', 'file-icons'], callback);
      });
      waitsFor('waiting for enable to complete', function() {
        return callback.callCount > 0;
      });
      return runs(function() {
        var config;
        expect(console.log).toHaveBeenCalled();
        expect(console.log.argsForCall[0][0]).toMatch(/Not Disabled:\s*not-installed/);
        expect(console.log.argsForCall[1][0]).toMatch(/Enabled:\s*vim-mode/);
        config = CSON.readFileSync(configFilePath);
        return expect(config).toEqual({
          '*': {
            core: {
              disabledPackages: ["metrics", "exception-reporting"]
            }
          }
        });
      });
    });
    it('does nothing if a package is already enabled', function() {
      var atomHome, callback, configFilePath;
      atomHome = temp.mkdirSync('apm-home-dir-');
      process.env.ATOM_HOME = atomHome;
      callback = jasmine.createSpy('callback');
      configFilePath = path.join(atomHome, 'config.cson');
      CSON.writeFileSync(configFilePath, {
        '*': {
          core: {
            disabledPackages: ["metrics", "exception-reporting"]
          }
        }
      });
      runs(function() {
        return apm.run(['enable', 'vim-mode'], callback);
      });
      waitsFor('waiting for enable to complete', function() {
        return callback.callCount > 0;
      });
      return runs(function() {
        var config;
        expect(console.log).toHaveBeenCalled();
        expect(console.log.argsForCall[0][0]).toMatch(/Not Disabled:\s*vim-mode/);
        config = CSON.readFileSync(configFilePath);
        return expect(config).toEqual({
          '*': {
            core: {
              disabledPackages: ["metrics", "exception-reporting"]
            }
          }
        });
      });
    });
    it('produces an error if config.cson doesn\'t exist', function() {
      var atomHome, callback;
      atomHome = temp.mkdirSync('apm-home-dir-');
      process.env.ATOM_HOME = atomHome;
      callback = jasmine.createSpy('callback');
      runs(function() {
        return apm.run(['enable', 'vim-mode'], callback);
      });
      waitsFor('waiting for enable to complete', function() {
        return callback.callCount > 0;
      });
      return runs(function() {
        expect(console.error).toHaveBeenCalled();
        return expect(console.error.argsForCall[0][0].length).toBeGreaterThan(0);
      });
    });
    return it('complains if user supplies no packages', function() {
      var atomHome, callback;
      atomHome = temp.mkdirSync('apm-home-dir-');
      process.env.ATOM_HOME = atomHome;
      callback = jasmine.createSpy('callback');
      runs(function() {
        return apm.run(['enable'], callback);
      });
      waitsFor('waiting for enable to complete', function() {
        return callback.callCount > 0;
      });
      return runs(function() {
        expect(console.error).toHaveBeenCalled();
        return expect(console.error.argsForCall[0][0].length).toBeGreaterThan(0);
      });
    });
  });

}).call(this);
