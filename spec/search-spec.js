// Generated by CoffeeScript 1.12.7
(function() {
  var apm, express, http, path;

  path = require('path');

  express = require('express');

  http = require('http');

  apm = require('../lib/apm-cli');

  describe('apm search', function() {
    var server;
    server = null;
    beforeEach(function() {
      var app, live;
      silenceOutput();
      spyOnToken();
      app = express();
      app.get('/search', function(request, response) {
        return response.sendFile(path.join(__dirname, 'fixtures', 'search.json'));
      });
      server = http.createServer(app);
      live = false;
      server.listen(3000, '127.0.0.1', function() {
        process.env.ATOM_PACKAGES_URL = "http://localhost:3000";
        return live = true;
      });
      return waitsFor(function() {
        return live;
      });
    });
    afterEach(function() {
      var done;
      done = false;
      server.close(function() {
        return done = true;
      });
      return waitsFor(function() {
        return done;
      });
    });
    it('lists the matching packages and excludes deprecated packages', function() {
      var callback;
      callback = jasmine.createSpy('callback');
      apm.run(['search', 'duck'], callback);
      waitsFor('waiting for command to complete', function() {
        return callback.callCount > 0;
      });
      return runs(function() {
        expect(console.log).toHaveBeenCalled();
        expect(console.log.argsForCall[1][0]).toContain('duckberg');
        expect(console.log.argsForCall[2][0]).toContain('ducktales');
        expect(console.log.argsForCall[3][0]).toContain('duckblur');
        return expect(console.log.argsForCall[4][0]).toBeUndefined();
      });
    });
    return it("logs an error if the query is missing or empty", function() {
      var callback;
      callback = jasmine.createSpy('callback');
      apm.run(['search'], callback);
      waitsFor('waiting for command to complete', function() {
        return callback.callCount > 0;
      });
      return runs(function() {
        expect(console.error).toHaveBeenCalled();
        return expect(console.error.argsForCall[0][0].length).toBeGreaterThan(0);
      });
    });
  });

}).call(this);
